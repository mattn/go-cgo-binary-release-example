name: Release
on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: stable

jobs:
  build:
    strategy:
      matrix:
        #os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            gcc-mingw-w64

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows' && matrix.arch != 'arm64'
        run: |
          choco install mingw
          choco install gcc-arm

      - name: Install dependencies (MacOS)
        if: runner.os == 'macOS'
        run: brew install gcc

      - name: Build
        if: ${{ !(matrix.os == 'windows-latest' && matrix.arch == 'arm64') }}
        env:
          CGO_ENABLED: 1
          GOOS: ${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || 'darwin' }}
          GOARCH: ${{ matrix.arch }}
          CC: ${{ runner.os == 'macOS' && 'clang' || (runner.os == 'Linux' && matrix.arch == 'arm64') && 'aarch64-linux-gnu-gcc' || (runner.os == 'Windows' && matrix.arch == 'arm64') && 'arm-none-eabi-gcc' || 'gcc' }}
        shell: pwsh
        run: |
          if ($env:runner_os -eq "Windows") {
            go build -o "myapp-${{ runner.os }}-${{ matrix.arch }}.exe"
          } else {
            go build -o "myapp-${{ runner.os }}-${{ matrix.arch }}"
          }

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: myapp-${{ runner.os }}-${{ matrix.arch }}
          path: myapp-${{ runner.os }}-${{ matrix.arch }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts from the build job
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: myapp ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          generate_release_notes: true
          files: |
            ./myapp-Linux-amd64/myapp-Linux-amd64
            ./myapp-Linux-arm64/myapp-Linux-arm64
            ./myapp-macOS-amd64/myapp-macOS-amd64
            ./myapp-macOS-arm64/myapp-macOS-arm64
            ./myapp-Windows-amd64/myapp-Windows-amd64.exe
